{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`cosmoz-treenode-breadcrumb` is a component to display the path of a node from a `cosmoz-tree` data structure.\n\nThe component uses a custom template to display each path part, allowing user to render html links or buttons for each path part.",
      "summary": "",
      "path": "cosmoz-treenode-breadcrumb.html",
      "properties": [
        {
          "name": "keyProperty",
          "type": "string",
          "description": "Name of the property used to lookup the displayed node in the tree",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "keyValue",
          "type": "string",
          "description": "The value for the `keyProperty` used to lookup the node in the tree.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "ownerTree",
          "type": "Cosmoz.Tree",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "indexAs",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"index\""
        },
        {
          "name": "nodeAs",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"node\""
        },
        {
          "name": "valueAs",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "valueProperty",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"name\""
        },
        {
          "name": "pathSeparator",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"/\""
        },
        {
          "name": "hideFromRoot",
          "type": "number",
          "description": "Represent a number of nodes that should not be rendered starting from root.\nIf the path to the displayed node has less nodes than this number, then nothing is hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "showMaxNodes",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "ellipsis",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"â€¦ /\""
        },
        {
          "name": "noWrap",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_path",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_pathToRender",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_textPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_hideEllipsis",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_templateInstances",
          "type": "object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 3
            },
            "end": {
              "line": 161,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "templatize",
          "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/legacy/templatizer-behavior.html",
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to prepare"
            },
            {
              "name": "mutableData",
              "type": "boolean=",
              "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
            }
          ],
          "inheritedFrom": "Polymer.Templatizer"
        },
        {
          "name": "stamp",
          "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/legacy/templatizer-behavior.html",
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object=",
              "description": "Object containing initial property values to\n  populate into the template bindings."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Returns the created instance of\nthe template prepared by `templatize`."
          },
          "inheritedFrom": "Polymer.Templatizer"
        },
        {
          "name": "modelForElement",
          "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/legacy/templatizer-behavior.html",
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "Element for which to return a template model."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Model representing the binding scope for\n  the element."
          },
          "inheritedFrom": "Polymer.Templatizer"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computePathToRender",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 3
            },
            "end": {
              "line": 182,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "hideFromRoot"
            },
            {
              "name": "showMaxNode"
            }
          ]
        },
        {
          "name": "_computePath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 3
            },
            "end": {
              "line": 215,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ownerTree"
            },
            {
              "name": "keyProperty"
            },
            {
              "name": "keyValue"
            }
          ]
        },
        {
          "name": "_renderNode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 3
            },
            "end": {
              "line": 256,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pathToRender"
            }
          ]
        },
        {
          "name": "_cleanPreviousRender",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 3
            },
            "end": {
              "line": 274,
              "column": 4
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_ensureTemplatized",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 276,
              "column": 3
            },
            "end": {
              "line": 285,
              "column": 4
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_forwardParentProp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 3
            },
            "end": {
              "line": 293,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_forwardParentPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 3
            },
            "end": {
              "line": 301,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 61,
          "column": 10
        },
        "end": {
          "line": 302,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "key-property",
          "description": "Name of the property used to lookup the displayed node in the tree",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "key-value",
          "description": "The value for the `keyProperty` used to lookup the node in the tree.",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "owner-tree",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Cosmoz.Tree"
        },
        {
          "name": "index-as",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "node-as",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value-as",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "path-separator",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "hide-from-root",
          "description": "Represent a number of nodes that should not be rendered starting from root.\nIf the path to the displayed node has less nodes than this number, then nothing is hidden.",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "show-max-nodes",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "ellipsis",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "no-wrap",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "cosmoz-treenode-breadcrumb.html",
            "start": {
              "line": 57,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 15
            }
          }
        }
      ],
      "tagname": "cosmoz-treenode-breadcrumb"
    }
  ]
}
